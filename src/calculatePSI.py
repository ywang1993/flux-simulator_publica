"""
Date: 04/29/2020
Usage:
    python [fn_pro] [fn_gtf] [fn_rmats]
Arguments:
    fn_pro: file path of expression profile used for flux simulator
    fn_gtf: file path of GTF file used for flux simulator
    fn_rmats: file path of fromGTF.SE.txt file generated by rmats
"""
import os, sys
import argparse

USAGE = """python %(prog)s --gtf path/to/gtf.txt --pro path/to/XX.PRO --rmats path/to/from.GTF.SE.txt"""


def get_args():
    parser = argparse.ArgumentParser(usage=USAGE)
    parser.add_argument("--od", action="store", help="output folder, default: working folder", default="", dest="path")
    requiredNamed = parser.add_argument_group("required named arguments")
    requiredNamed.add_argument(
        "--gtf", action="store", help="file path to GTF file used for flux simulator", dest="fn_gtf", required=True
    )
    requiredNamed.add_argument(
        "--pro",
        action="store",
        help="file path of expression profile used in flux simulator",
        dest="fn_pro",
        required=True,
    )
    requiredNamed.add_argument(
        "--rmats",
        action="store",
        help="file path of from.GTF.SE.txt file path generated by rmats",
        dest="fn_rmats",
        required=True,
    )

    args = parser.parse_args()
    return args


class GTF(object):
    def __init__(self, line):
        (
            self.seqname,
            self.source,
            self.feature,
            self.start,
            self.end,
            self.score,
            self.strand,
            self.frame,
            self.attribute,
        ) = line.strip().split("\t")
        self.start = int(self.start)
        self.end = int(self.end)
        self.chrom = self.seqname if "chr" in self.seqname else "chr" + self.seqname
        self.gene_id = self.attribute.split("gene_id")[1].split('"')[1]
        self.gene_name = self.attribute.split("gene_name")[1].split('"')[1]
        self.gene_type = self.attribute.split("gene_type")[1].split('"')[1]
        self.transcript_id = (
            self.attribute.split("transcript_id")[1].split('"')[1] if "transcript_id" in self.attribute else None
        )
        self.exon_number = (
            int(self.attribute.split("exon_number")[1].split(";")[0].strip(""))
            if "exon_number" in self.attribute
            else None
        )

    def __str__(self):
        return self.line


class fromGTF(object):
    def __init__(self, line):
        self.line_list = line.replace('"', "").strip().split("\t")
        (
            self.ID,
            self.GeneID,
            self.geneSymbol,
            self.chrom,
            self.strand,
            self.exonStart_0base,
            self.exonEnd,
            self.upstreamES,
            self.upstreamEE,
            self.downstreamES,
            self.downstreamEE,
        ) = self.line_list[0:18]
        self.uniqID = "|".join(
            [
                self.chrom + ":" + self.exonStart_0base + "-" + self.exonEnd,
                self.strand,
                self.upstreamEE,
                self.downstreamES,
            ]
        )
        self.exonStart_0base = int(self.exonStart_0base)
        self.exonEnd = int(self.exonEnd)
        self.upstreamES = int(self.upstreamES)
        self.upstreamEE = int(self.upstreamEE)
        self.downstreamES = int(self.downstreamES)
        self.downstreamEE = int(self.downstreamEE)
        return

    def __str__(self):
        return str(line)


def parse_pro(gtf, pro):
    """[summary]
    This function is used to
    1. filter out               genes with multiple transcripts in expression profile
    2. get TXs structure for    genes with multiple transcripts in expression profile
    3. get TXs number for       genes with multiple transcripts in expression profile
    
    Arguments:
        gtf {[file name]} -- [description]
        pro {[file name]} -- [description]
    """
    print("start: parsing exp profile")
    tx2gene = {}
    with open(gtf, "r") as fin:
        for line in fin:
            if line.startswith("#"):
                continue
            x = GTF(line)
            if x.feature == "transcript" and x.transcript_id not in tx2gene:
                tx2gene[x.transcript_id] = x.gene_id

    gene_dict = {}
    COUNT = {}
    with open(pro, "r") as fin:
        for line in fin:
            loc, tx, ctg, tlen, i, count = line.strip().split("\t")[0:6]

            if int(count) == 0:
                continue

            gene = tx2gene[tx]

            if gene in gene_dict:
                gene_dict[gene] += 1
            else:
                gene_dict[gene] = 1

            if gene not in COUNT:
                COUNT[gene] = {"TX": {}}
            COUNT[gene]["TX"][tx] = int(count)

    GENE = {}
    with open(gtf, "r") as fin:
        for line in fin:
            if line.startswith("#"):
                continue
            x = GTF(line)

            if not x.gene_id in gene_dict:
                continue
            if gene_dict[x.gene_id] < 2:
                continue

            if x.feature == "exon":
                if (x.gene_id not in COUNT) or (x.transcript_id not in COUNT[x.gene_id]["TX"]):
                    continue
                if x.gene_id not in GENE:
                    GENE[x.gene_id] = {"TX": {}, "gene_name": x.gene_name}
                if x.transcript_id not in GENE[x.gene_id]["TX"]:
                    GENE[x.gene_id]["TX"][x.transcript_id] = []
                GENE[x.gene_id]["TX"][x.transcript_id].append((x.start, x.end))

        for gene in GENE:
            for tx in GENE[gene]["TX"]:
                GENE[gene]["TX"][tx].sort()

    print("end  : parsing exp profile")
    return GENE, COUNT


def detectSE(rmats, GENE):
    print("start: detecting SE")
    SE = {}
    with open(rmats, "r") as fin:
        fin.readline()
        for line in fin:
            x = fromGTF(line)

            if x.GeneID not in GENE:
                continue

            SE[x.uniqID] = {"inc": [], "skp": [], "gene_name": x.geneSymbol, "gene_id": x.GeneID}

            for tx in GENE[x.GeneID]["TX"]:
                # remove one-exon tx
                if len(GENE[x.GeneID]["TX"][tx]) == 1:
                    continue
                # initiation
                left = -1
                middle = -1
                right = -1
                # locate SE exons
                for idx in range(len(GENE[x.GeneID]["TX"][tx])):
                    if GENE[x.GeneID]["TX"][tx][idx][1] == x.upstreamEE:
                        left = idx
                    elif (
                        GENE[x.GeneID]["TX"][tx][idx][0] == (x.exonStart_0base + 1)
                        and GENE[x.GeneID]["TX"][tx][idx][1] == x.exonEnd
                    ):
                        middle = idx
                    elif GENE[x.GeneID]["TX"][tx][idx][0] == (x.downstreamES + 1):
                        right = idx
                # determine inc or skp
                if not (left == -1 or right == -1):
                    if middle == -1 and (right - left) == 1:
                        SE[x.uniqID]["skp"].append(tx)
                    elif (right - middle) == 1 and (middle - left) == 1:
                        SE[x.uniqID]["inc"].append(tx)
                elif left == -1 and middle == 0 and right == 2:
                    SE[x.uniqID]["inc"].append(tx)
                elif left == (len(GENE[x.GeneID]["TX"][tx]) - 2) and middle == (len(GENE[x.GeneID]["TX"][tx]) - 1):
                    SE[x.uniqID]["inc"].append(tx)
    print("end  : detecting SE")
    return SE


def CalculatePSI(SE, COUNT):
    print("start: calculating PSI")
    PSI = {}
    SE_COUNT = {}
    for key in SE:
        if len(SE[key]["inc"]) == 0 and len(SE[key]["skp"]) == 0:
            continue

        inc_count = 0
        skp_count = 0
        gene = SE[key]["gene_id"]

        if len(SE[key]["inc"]) == 0:
            PSI[key] = 0
            for tx in SE[key]["skp"]:
                skp_count += COUNT[gene]["TX"][tx]
        elif len(SE[key]["skp"]) == 0:
            PSI[key] = 1
            for tx in SE[key]["inc"]:
                inc_count += COUNT[gene]["TX"][tx]
        else:
            for tx in SE[key]["inc"]:
                inc_count += COUNT[gene]["TX"][tx]
            for tx in SE[key]["skp"]:
                skp_count += COUNT[gene]["TX"][tx]
            PSI[key] = float(inc_count) / (inc_count + skp_count)
        SE_COUNT[key] = inc_count + skp_count
    print("end  : calculating PSI")
    return SE_COUNT, PSI


if __name__ == "__main__":
    # fn_pro = "../profiles/count_modified.PRO"
    # fn_gtf = "../reference/gencode.v31lift37.annotation.gtf"
    # fn_rmats = "../../rmats/post/fromGTF.SE.txt"

    args = get_args()

    xGENE, xCOUNT = parse_pro(args.fn_gtf, args.fn_pro)
    xSE = detectSE(args.fn_rmats, xGENE)
    xSE_COUNT, xPSI = CalculatePSI(xSE, xCOUNT)

    with open(os.path.join(args.path, "PSI_SE.txt"), "w") as fo1, open(
        os.path.join(args.path, "PSI_altSE.txt"), "w"
    ) as fo2:
        fo1.write("ID\tPSI\tcount\n")
        fo2.write("ID\tPSI\tcount\n")
        for key in xPSI:
            fo1.write(key + "\t" + str(xPSI[key]) + "\t" + str(xSE_COUNT[key]) + "\n")
            if xPSI[key] > 0 and xPSI[key] < 1:
                fo2.write(key + "\t" + str(xPSI[key]) + "\t" + str(xSE_COUNT[key]) + "\n")
