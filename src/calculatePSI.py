"""
 # @author [Yuanyuan Wang]
 # @email [wyynju1993@gmail.com]
 # @create date 04/29/2020 18:40:07
 # @modify date 2020-05-25 18:40:07
 # @desc [description]
 Usage:
    python [fn_pro] [fn_gtf] [fn_rmats]
 Arguments:
    fn_pro: file path of expression profile used for flux simulator
    fn_gtf: file path of GTF file used for flux simulator
    fn_rmats: file path of fromGTF.SE.txt file generated by rmats
"""

from __future__ import print_function
import os, sys
import argparse
from datetime import datetime

# GLOBAL VARIABLE
USAGE = """python %(prog)s --gtf path/to/gtf.txt --pro path/to/XX.PRO --rmats path/to/from.GTF.SE.txt [options]"""


def get_args():
    parser = argparse.ArgumentParser(usage=USAGE)
    parser.add_argument(
        "--od", action="store", help="output folder, default: working folder", default="./", dest="outpath"
    )
    requiredNamed = parser.add_argument_group("required named arguments")
    requiredNamed.add_argument(
        "--gtf", action="store", help="file path to GTF file used for flux simulator", dest="fn_gtf", required=True
    )
    requiredNamed.add_argument(
        "--pro",
        action="store",
        help="file path of expression profile used in flux simulator",
        dest="fn_pro",
        required=True,
    )
    requiredNamed.add_argument(
        "--rmats",
        action="store",
        help="file paths of from.GTF.AS.txt (generated by rmats); seperated by comma",
        dest="fn_rmats",
        required=True,
    )

    args = parser.parse_args()
    args.fn_rmats = [os.path.abspath(x) for x in args.fn_rmats.split(",")]
    args.fn_psi = [os.path.join(os.path.abspath(args.outpath), "PSI_" + os.path.basename(x)) for x in args.fn_rmats]
    return args


class GTF(object):
    def __init__(self, line):
        (
            self.seqname,
            self.source,
            self.feature,
            self.start,
            self.end,
            self.score,
            self.strand,
            self.frame,
            self.attribute,
        ) = line.strip().split("\t")
        self.start = int(self.start)
        self.end = int(self.end)
        self.chrom = self.seqname if "chr" in self.seqname else "chr" + self.seqname
        self.gene_id = self.attribute.split("gene_id")[1].split('"')[1]
        self.gene_name = self.attribute.split("gene_name")[1].split('"')[1]
        self.gene_type = self.attribute.split("gene_type")[1].split('"')[1]
        self.transcript_id = (
            self.attribute.split("transcript_id")[1].split('"')[1] if "transcript_id" in self.attribute else None
        )
        self.exon_number = (
            int(self.attribute.split("exon_number")[1].split(";")[0].strip(""))
            if "exon_number" in self.attribute
            else None
        )

    def __str__(self):
        return self.line


class fromGTF_SE(object):
    def __init__(self, line):
        self.line_list = line.replace('"', "").strip().split("\t")
        (
            self.ID,
            self.GeneID,
            self.geneSymbol,
            self.chrom,
            self.strand,
            self.exonStart_0base,
            self.exonEnd,
            self.upstreamES,
            self.upstreamEE,
            self.downstreamES,
            self.downstreamEE,
        ) = self.line_list[0:11]
        self.uniqID = "|".join(
            [
                self.chrom + ":" + self.exonStart_0base + "-" + self.exonEnd,
                self.strand,
                self.upstreamEE,
                self.downstreamES,
            ]
        )
        self.exonStart_0base = int(self.exonStart_0base)
        self.exonEnd = int(self.exonEnd)
        self.upstreamES = int(self.upstreamES)
        self.upstreamEE = int(self.upstreamEE)
        self.downstreamES = int(self.downstreamES)
        self.downstreamEE = int(self.downstreamEE)
        return

    def __str__(self):
        return str(line)


class fromGTF_RI(object):
    def __init__(self, line):
        self.line_list = line.replace('"', "").strip().split("\t")
        (
            self.ID,
            self.GeneID,
            self.geneSymbol,
            self.chrom,
            self.strand,
            self.riExonStart_0base,
            self.riExonEnd,
            self.upstreamES,
            self.upstreamEE,
            self.downstreamES,
            self.downstreamEE,
        ) = self.line_list[0:11]
        self.uniqID = "|".join(
            [
                self.chrom + ":" + self.upstreamEE + "-" + self.downstreamES,
                self.strand,
                self.upstreamES,
                self.downstreamEE,
            ]
        )
        self.riExonStart_0base = int(self.riExonStart_0base)
        self.riExonEnd = int(self.riExonEnd)
        self.upstreamES = int(self.upstreamES)
        self.upstreamEE = int(self.upstreamEE)
        self.downstreamES = int(self.downstreamES)
        self.downstreamEE = int(self.downstreamEE)
        return

    def __str__(self):
        return str(line)


class fromGTF_AXSS(object):
    def __init__(self, line):
        self.line_list = line.replace('"', "").strip().split("\t")
        (
            self.ID,
            self.GeneID,
            self.geneSymbol,
            self.chrom,
            self.strand,
            self.longExonStart_0base,
            self.longExonEnd,
            self.shortES,
            self.shortEE,
            self.flankingES,
            self.flankingEE,
        ) = self.line_list[0:11]

        if int(self.flankingEE) <= int(self.longExonStart_0base):
            self.uniqID = "|".join(
                [
                    self.chrom + ":" + self.flankingES + "-" + self.flankingEE,
                    self.strand,
                    self.longExonStart_0base,
                    self.shortES,
                ]
            )
        elif int(self.flankingES) >= int(self.longExonEnd):
            self.uniqID = "|".join(
                [
                    self.chrom + ":" + self.flankingES + "-" + self.flankingEE,
                    self.strand,
                    self.longExonEnd,
                    self.shortEE,
                ]
            )
        else:
            sys.exit("Error: check A5SS and A3SS file")

        self.longExonStart_0base = int(self.longExonStart_0base)
        self.longExonEnd = int(self.longExonEnd)
        self.shortES = int(self.shortES)
        self.shortEE = int(self.shortEE)
        self.flankingES = int(self.flankingES)
        self.flankingEE = int(self.flankingEE)
        return

    def __str__(self):
        return str(line)


class fromGTF_MXE(object):
    def __init__(self, line):
        self.line_list = line.replace('"', "").strip().split("\t")
        (
            self.ID,
            self.GeneID,
            self.geneSymbol,
            self.chrom,
            self.strand,
            self.stExonStart_0base,
            self.stExonEnd,
            self.ndExonStart_0base,
            self.ndExonEnd,
            self.upstreamES,
            self.upstreamEE,
            self.downstreamES,
            self.downstreamEE,
        ) = self.line_list[0:13]

        self.uniqID = "|".join(
            [
                self.chrom
                + ":"
                + self.stExonStart_0base
                + "-"
                + self.stExonEnd
                + ":"
                + self.ndExonStart_0base
                + "-"
                + self.ndExonEnd,
                self.strand,
                self.upstreamEE,
                self.downstreamES,
            ]
        )
        self.stExonStart_0base = int(self.stExonStart_0base)
        self.stExonEnd = int(self.stExonEnd)
        self.ndExonStart_0base = int(self.ndExonStart_0base)
        self.ndExonEnd = int(self.ndExonEnd)
        self.upstreamES = int(self.upstreamES)
        self.upstreamEE = int(self.upstreamEE)
        self.downstreamES = int(self.downstreamES)
        self.downstreamEE = int(self.downstreamEE)
        return

    def __str__(self):
        return str(line)


def parse_pro(gtf, pro):
    """[summary]
    This function is used to
    1. filter out               genes with single transcripts in expression profile, gene_occurrence
    2. get TXs structure for    genes with multiple transcripts in expression profile, gene_struct
    3. get TXs number for       genes with multiple transcripts in expression profile, count_gene_tx
    
    Arguments:
        gtf {[file name]} -- [description]
        pro {[file name]} -- [description]
    """
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "start: parsing exp profile.")

    print("\t1.", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "tx2gene mapping")
    tx2gene = {}
    with open(gtf, "r") as fin:
        for line in fin:
            if line.startswith("#"):
                continue
            x = GTF(line)
            if x.feature == "transcript" and x.transcript_id not in tx2gene:
                tx2gene[x.transcript_id] = x.gene_id

    print("\t2.", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "count gene/tx occurrence")
    gene_occurrence = {}
    count_gene_tx = {}
    with open(pro, "r") as fin:
        for line in fin:
            loc, tx, ctg, tlen, i, count = line.strip().split("\t")[0:6]

            if int(count) == 0:
                continue

            gene = tx2gene[tx]

            if gene in gene_occurrence:
                gene_occurrence[gene] += 1
            else:
                gene_occurrence[gene] = 1

            if gene not in count_gene_tx:
                count_gene_tx[gene] = {"TX": {}}
            count_gene_tx[gene]["TX"][tx] = int(count)

    print("\t3.", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "parsing GTF to extract exons in tx")
    gene_struct = {}
    with open(gtf, "r") as fin:
        for line in fin:
            if line.startswith("#"):
                continue
            x = GTF(line)

            if not x.gene_id in gene_occurrence:
                continue
            if gene_occurrence[x.gene_id] < 2:
                continue

            if x.feature == "exon":
                if (x.gene_id not in count_gene_tx) or (x.transcript_id not in count_gene_tx[x.gene_id]["TX"]):
                    continue
                if x.gene_id not in gene_struct:
                    gene_struct[x.gene_id] = {"TX": {x.transcript_id: [(x.start, x.end)]}, "gene_name": x.gene_name}
                elif x.transcript_id not in gene_struct[x.gene_id]["TX"]:
                    gene_struct[x.gene_id]["TX"][x.transcript_id] = [(x.start, x.end)]
                else:
                    gene_struct[x.gene_id]["TX"][x.transcript_id].append((x.start, x.end))

    for gene in gene_struct:
        for tx in gene_struct[gene]["TX"]:
            gene_struct[gene]["TX"][tx].sort()

    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "end  : parsing exp profile")
    return gene_struct, count_gene_tx


def detectSE(rmats, gene_struct):
    SE = {}
    with open(rmats, "r") as fin:
        fin.readline()
        for line in fin:
            x = fromGTF_SE(line)

            if x.GeneID not in gene_struct:
                continue

            SE[x.uniqID] = {"inc": [], "skp": [], "gene_name": x.geneSymbol, "gene_id": x.GeneID}

            for tx in gene_struct[x.GeneID]["TX"]:
                # remove one-exon tx
                if len(gene_struct[x.GeneID]["TX"][tx]) == 1:
                    continue
                # initiation
                left = -1
                middle = -1
                right = -1
                # locate SE exons
                for idx in range(len(gene_struct[x.GeneID]["TX"][tx])):
                    exon = gene_struct[x.GeneID]["TX"][tx][idx]
                    if exon[1] == x.upstreamEE:
                        left = idx
                    elif exon[0] == (x.exonStart_0base + 1) and exon[1] == x.exonEnd:
                        middle = idx
                    elif exon[0] == (x.downstreamES + 1):
                        right = idx
                # determine inc or skp
                if not (left == -1 or right == -1):
                    if middle == -1 and (right - left) == 1:
                        SE[x.uniqID]["skp"].append(tx)
                    elif (right - middle) == 1 and (middle - left) == 1:
                        SE[x.uniqID]["inc"].append(tx)
                # elif left == -1 and middle == 0 and right == 1:
                #     SE[x.uniqID]["inc"].append(tx)
                # elif left == (len(gene_struct[x.GeneID]["TX"][tx]) - 2) and middle == (len(gene_struct[x.GeneID]["TX"][tx]) - 1):
                #     SE[x.uniqID]["inc"].append(tx)
    return SE


def detectRI(rmats, gene_struct):
    RI = {}
    with open(rmats, "r") as fin:
        fin.readline()
        for line in fin:
            x = fromGTF_RI(line)

            if x.GeneID not in gene_struct:
                continue

            RI[x.uniqID] = {"inc": [], "skp": [], "gene_name": x.geneSymbol, "gene_id": x.GeneID}

            for tx in gene_struct[x.GeneID]["TX"]:
                # initiation
                left = -1
                right = -1
                include = False
                # locate RI exons
                for idx in range(len(gene_struct[x.GeneID]["TX"][tx])):
                    exon = gene_struct[x.GeneID]["TX"][tx][idx]
                    if exon[1] == x.upstreamEE:
                        left = idx
                    elif exon[0] == (x.downstreamES + 1):
                        right = idx
                    elif exon[0] <= x.upstreamEE and exon[1] >= (x.downstreamES + 1):
                        include = True
                # determine inc or skp
                if (left > -1) and (right > -1) and (right - left) == 1:
                    RI[x.uniqID]["skp"].append(tx)
                if include:
                    RI[x.uniqID]["inc"].append(tx)
    return RI


def detectMXE(rmats, gene_struct):
    MXE = {}
    with open(rmats, "r") as fin:
        fin.readline()
        for line in fin:
            x = fromGTF_MXE(line)

            if x.GeneID not in gene_struct:
                continue

            MXE[x.uniqID] = {"inc": [], "skp": [], "gene_name": x.geneSymbol, "gene_id": x.GeneID}

            for tx in gene_struct[x.GeneID]["TX"]:
                # initiation
                left = -1
                texon = -1
                aexon = -1
                right = -1
                # locate MXE
                for idx in range(len(gene_struct[x.GeneID]["TX"][tx])):
                    exon = gene_struct[x.GeneID]["TX"][tx][idx]
                    if exon[1] == x.upstreamEE:
                        left = idx
                    elif exon[0] == (x.downstreamES + 1):
                        right = idx
                    elif (exon[0] == x.stExonStart_0base + 1) and (exon[1] == x.stExonEnd):
                        texon = idx
                    elif (exon[0] == x.ndExonStart_0base + 1) and (exon[1] == x.ndExonEnd):
                        aexon = idx
                # determine inc or skp
                if (left == -1) or (right == -1):
                    continue
                if (texon > -1) and (right - texon == 1) and (texon - left == 1):
                    MXE[x.uniqID]["inc"].append(tx)
                elif (aexon > -1) and (right - aexon == 1) and (aexon - left == 1):
                    MXE[x.uniqID]["skp"].append(tx)

            if x.strand == "-":
                MXE[x.uniqID]["inc"], MXE[x.uniqID]["skp"] = MXE[x.uniqID]["skp"], MXE[x.uniqID]["inc"]

    return MXE


def detectAXSS(rmats, gene_struct):
    AXSS = {}
    with open(rmats, "r") as fin:
        fin.readline()
        for line in fin:
            x = fromGTF_AXSS(line)

            if x.GeneID not in gene_struct:
                continue

            AXSS[x.uniqID] = {"inc": [], "skp": [], "gene_name": x.geneSymbol, "gene_id": x.GeneID}

            for tx in gene_struct[x.GeneID]["TX"]:
                # remove one-exon tx
                if len(gene_struct[x.GeneID]["TX"][tx]) == 1:
                    continue
                # initiation
                flank = -1
                elong = -1
                eshort = -1
                # locate AXSS exons
                for idx in range(len(gene_struct[x.GeneID]["TX"][tx])):
                    exon = gene_struct[x.GeneID]["TX"][tx][idx]
                    if x.flankingEE <= x.longExonStart_0base:
                        if exon[1] == x.flankingEE:
                            flank = idx
                        elif exon[0] == (x.longExonStart_0base + 1):
                            elong = idx
                        elif exon[0] == (x.shortES + 1):
                            eshort = idx
                    elif x.flankingES >= x.longExonEnd:
                        if exon[0] == (x.flankingES + 1):
                            flank = idx
                        elif exon[1] == x.longExonEnd:
                            elong = idx
                        elif exon[1] == x.shortES:
                            eshort = idx
                    else:
                        sys.exit("Error: " + rmats + ", line\n\t", line)

                # determine inc or skp
                if x.flankingEE <= x.longExonStart_0base:
                    if (flank > -1) and (elong > -1) and (elong - flank == 1):
                        AXSS[x.uniqID]["inc"].append(tx)
                    elif (flank > -1) and (eshort > -1) and (eshort - flank == 1):
                        AXSS[x.uniqID]["skp"].append(tx)
                elif x.flankingES >= x.longExonEnd:
                    if (flank > -1) and (elong > -1) and (elong - flank == -1):
                        AXSS[x.uniqID]["inc"].append(tx)
                    elif (flank > -1) and (eshort > -1) and (eshort - flank == -11):
                        AXSS[x.uniqID]["skp"].append(tx)
    return AXSS


def detectAS(rmats, gene_struct):
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "start: detecting AS", rmats)
    if "SE" in rmats:
        AS = detectSE(rmats, gene_struct)
    elif "RI" in rmats:
        AS = detectRI(rmats, gene_struct)
    elif "A3SS" in rmats or "A5SS" in rmats:
        AS = detectAXSS(rmats, gene_struct)
    elif "MXE" in rmats:
        AS = detectMXE(rmats, gene_struct)
    else:
        sys.exit("Error: check the name of input fromGTF_AS.txt file. It must contain the event type. \t", rmats)

    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "end  : detecting AS", rmats)
    return AS


def CalculatePSI(AS, count_gene_tx):
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "start: calculating PSI")
    PSI = {}
    AS_COUNT = {}
    for key in AS:
        if len(AS[key]["inc"]) == 0 and len(AS[key]["skp"]) == 0:
            continue

        inc_count = 0
        skp_count = 0
        gene = AS[key]["gene_id"]

        if len(AS[key]["inc"]) == 0:
            PSI[key] = 0
            for tx in AS[key]["skp"]:
                skp_count += count_gene_tx[gene]["TX"][tx]
        elif len(AS[key]["skp"]) == 0:
            PSI[key] = 1
            for tx in AS[key]["inc"]:
                inc_count += count_gene_tx[gene]["TX"][tx]
        else:
            for tx in AS[key]["inc"]:
                inc_count += count_gene_tx[gene]["TX"][tx]
            for tx in AS[key]["skp"]:
                skp_count += count_gene_tx[gene]["TX"][tx]
            PSI[key] = float(inc_count) / (inc_count + skp_count)
        AS_COUNT[key] = inc_count + skp_count
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "end  : calculating PSI")
    return AS_COUNT, PSI


def main():
    # fn_pro = "../profiles/count_modified.PRO"
    # fn_gtf = "../reference/gencode.v31lift37.annotation.gtf"
    # fn_rmats = "../../rmats/post/fromGTF.SE.txt"

    args = get_args()

    xgene_struct, xcount_gene_tx = parse_pro(args.fn_gtf, args.fn_pro)

    for idx in range(len(args.fn_rmats)):
        xAS = detectAS(args.fn_rmats[idx], xgene_struct)
        xAS_COUNT, xPSI = CalculatePSI(xAS, xcount_gene_tx)

        with open(args.fn_psi[idx], "w") as fo:
            fo.write("ID\tPSI\tcount\n")
            for key in xPSI:
                fo.write(key + "\t" + str(xPSI[key]) + "\t" + str(xAS_COUNT[key]) + "\n")


if __name__ == "__main__":
    main()
